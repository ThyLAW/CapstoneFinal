trigger:
 branches:
  include:
    - "*"
  exclude:
    - main

variables:
  buildConfiguration: "Test"
  webRepository: "capstonefinal"
  tag: "$(Build.BuildId)"

stages:
  - stage: "Test"
    displayName: "Testing"
    jobs:
      # - job: "Test"
      #   displayName: "Test Job"
      #   pool:
      #     vmImage: "ubuntu-20.04"
      #   steps:
      #     - task: CmdLine@2
      #       displayName: hadolint
      #       inputs:
      #         script: "cat $(Build.SourcesDirectory)/Dockerfile | docker run --rm -i -v $(Build.SourcesDirectory)/hadolint.yaml:/.config/hadolint.yaml hadolint/hadolint > $(Build.ArtifactStagingDirectory)/output.txt && cat $(Build.SourcesDirectory)/Dockerfile | docker run --rm -i -v $(Build.SourcesDirectory)/hadolint.yaml:/.config/hadolint.yaml hadolint/hadolint"
      #         workingDirectory: "$(Build.SourcesDirectory)"
      #       continueOnError: true
            
          # - task: WhiteSource@21
          #   inputs:
          #     projectName: 'CapstoneFinal'
          # - task: PublishPipelineArtifact@1
          #   inputs:
          #     targetPath: $(Build.ArtifactStagingDirectory)
          #     artifactName: hadolintOutput

      - job: "Test_Python"
        displayName: "Test Python"
        pool:
         vmImage: "ubuntu-latest"
        steps:                   
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.6'
          # - task: Docker@2
          #   displayName: "Build and push the image to container registry"
          #   inputs:
          #     command: buildAndPush
          #     buildContext: $(Build.Repository.LocalPath)
          #     repository: thylaw/flasktest
          #     dockerfile: "$(Build.SourcesDirectory)/Dockerfile"
          #     containerRegistry: "DockerHub Registry Connection"
          #     tags: |
          #       $(tag) 
          # - task: Docker@2
          #   inputs:
          #     command: 'build'
          #     Dockerfile: '**/Dockerfile'
          #     tags: flasktest123
          # - task: Docker@2
          #   inputs:
          #     command: 'start'
          #     arguments: '-p 5000:5000'
          #     container: 'flasktest123'
          - script: |
              apt-get install libcurl libcurl-dev
            displayName: "install libcurl"

          - script: |
              pip install --upgrade pycurl pytest
            displayName: "Install dependencies"
          - task: CmdLine@2
            displayName: dockertest
            inputs:
              script: "docker run -d -p 5000:5000 --name flaskcontainer thylaw/flasktest:218"
              workingDirectory: "$(Build.SourcesDirectory)"
            continueOnError: true

          - task: PythonScript@0
            inputs:
              scriptSource: 'filePath'
              scriptPath: '$(Build.SourcesDirectory)/test_curl.py'
          - task: CmdLine@2
            displayName: curl
            inputs:
              script: "curl http://localhost:5000"
              workingDirectory: "$(Build.SourcesDirectory)"
            continueOnError: true


          # - script: |
          #     python -m pip install flake8
          #     flake8 . | tee $(Build.ArtifactStagingDirectory)/flake8output.txt
          #   displayName: 'Run Flake8 Test'
          #   continueOnError: true

          # - task: PublishPipelineArtifact@1
          #   inputs:
          #     targetPath: $(Build.ArtifactStagingDirectory)
          #     artifactName: pythonoutput
          # - task: PythonScript@0
          #   inputs:
          #     scriptSource: inline
          #     script: |
              #  python -m pip install --upgrade pip
              #  python -m pip install bandit
              #  bandit -r $(Build.SourcesDirectory)/app.py -f json | tee $(Build.ArtifactStagingDirectory)/bandit-output.json
              
