trigger:
  branches:
    include:
      - "*"
    exclude:
      - main

variables:
  buildConfiguration: "Test"
  webRepository: "capstonefinal"
  tag: "$(Build.BuildId)"

stages:
  - stage: "Test"
    displayName: "Testing"
    jobs:
      # - job: "Test"
      #   displayName: "Generic_Tests"
      #   pool:
      #     vmImage: "ubuntu-latest"
      #   steps:
      #     - task: CmdLine@2
      #       displayName: hadolint
      #       inputs:
      #         script: "cat $(Build.SourcesDirectory)/Dockerfile | docker run --rm -i -v $(Build.SourcesDirectory)/hadolint.yaml:/.config/hadolint.yaml hadolint/hadolint > $(Build.ArtifactStagingDirectory)/output.txt && cat $(Build.SourcesDirectory)/Dockerfile | docker run --rm -i -v $(Build.SourcesDirectory)/hadolint.yaml:/.config/hadolint.yaml hadolint/hadolint"
      #         workingDirectory: "$(Build.SourcesDirectory)"
      #       continueOnError: true

      #     - task: WhiteSource@21
      #       inputs:
      #         projectName: "CapstoneFinal"
      #     - task: PublishPipelineArtifact@1
      #       inputs:
      #         targetPath: $(Build.ArtifactStagingDirectory)
      #         artifactName: hadolintOutput

      - job: "Python_Tests"
        displayName: "Test Python"
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.6"

          - script: |
              docker build -f $(Build.SourcesDirectory)/Dockerfile -t thylaw/testcontainer:$(tag) .
              docker run --name flasktest --rm -d -p 5000:5000 thylaw/testcontainer:$(tag)
          - script: |
              git clone https://github.com/sullo/nikto
              cd nikto/program
              ./nikto.pl -h http://localhost:5000 -o $(Build.ArtifactStagingDirectory)/nikto.txt

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)
              artifactName: nikto

          # - script: |
          #     sudo apt-get install libcurl4-openssl-dev
          #   displayName: "Install Linux Packages"

          # - script: |
          #     pip install --upgrade pycurl pytest pytest-azurepipelines bandit
          #   displayName: "Install Python Dependencies"

          # - script: |
          #     python -m pytest test_curl.py
          #   displayName: "pytest"
          #   continueOnError: true
          # - task: CmdLine@2
          #   displayName: Get Curl Data
          #   inputs:
          #     script: "curl http://localhost:5000 > $(Build.ArtifactStagingDirectory)/curl.txt && curl http://localhost:5000 "
          #     workingDirectory: "$(Build.SourcesDirectory)"
          #   continueOnError: true

          # - script: |
          #     python -m pip install flake8
          #     flake8 . | tee $(Build.ArtifactStagingDirectory)/flake8output.txt
          #   displayName: "Run Flake8 Test"
          #   continueOnError: true
          # - script: |
          #     bandit -r $(Build.SourcesDirectory)/app.py -f json | tee $(Build.ArtifactStagingDirectory)/bandit-output.json
          #   displayName: "Bandit Test"
          # - task: PublishPipelineArtifact@1
          #   inputs:
          #     targetPath: $(Build.ArtifactStagingDirectory)
          #     artifactName: pythonoutput
